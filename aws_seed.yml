AWSTemplateFormatVersion: 2010-09-09

Parameters: 
  RepositoryName: 
    Type: String
    Description: The name of the CodeCommit repository to create
  CodePipelineS3BucketName:
    Type: String
    Description: The name of the S3 bucket to create that will be used to store artifacts from CodePipeline execution runs.
  CloudFormationDeployActionRoleName:
    Type: String
    Description: The name of the IAM role that will be created to run the CloudFormation deployment action as.
  CodePipelineRoleName:
    Type: String
    Description: The name of the IAM role that will be created for the CodePipeline to use.
  CodePipelineName:
    Type: String
    Description: The name of the CodePipeline to create.
  StageAdministerPipelineStackName:
    Type: String
    Description: The name of this stack that is creating the pipeline. If the names do not match then the pipeline will not be able to update itself.
  SSMGithubOAuthTokenParameter:
    Type: String
    Description: The encrypted SSM parameter containing the GitHub OAuth token.
  SSMGithubOAuthTokenParameterVersion:
    Type: String
    Description: The version of the encrypted SSM parameter containing the GitHub OAuth token.
Resources:

  CodeCommitRepository:
    Type: 'AWS::CodeCommit::Repository'
    Properties:
      RepositoryName: !Ref RepositoryName
      RepositoryDescription: !Join [' ', [!Ref RepositoryName, 'CodeCommit Repository']]

  CodePipelineBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref CodePipelineS3BucketName

  CloudFormationDeployActionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [cloudformation.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CloudFormationRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'codebuild:*'
                  - 'codecommit:*'
                  - 'cloudformation:*'
                  - 'codepipeline:*'
                  - 'iam:*'
                  - 's3:*'
                Effect: Allow
                Resource: '*'
      RoleName: !Ref CloudFormationDeployActionRoleName 

  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: codepipeline-service
          PolicyDocument:
            Statement:
              - Action:
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:UploadArchive
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:CancelUploadArchive

                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild

                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:PutObject

                  - cloudformation:GetTemplate
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackResources
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:CreateStack

                  - 'iam:PassRole'
                Resource: '*'
                Effect: Allow
            Version: 2012-10-17
      RoleName: !Ref CodePipelineRoleName 

  CodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    DependsOn: 
      - CodePipelineRole
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineBucket
      Name: !Ref CodePipelineName
      RestartExecutionOnUpdate: true
      RoleArn: !Join ['', ['arn:aws:iam::',!Ref 'AWS::AccountId',':role/',!Ref CodePipelineRole]]
      Stages:
        - Name: Source
          Actions:
            # - InputArtifacts: []
            #   Name: Source
            #   ActionTypeId:
            #     Category: Source
            #     Owner: AWS
            #     Version: '1'
            #     Provider: CodeCommit
            #   OutputArtifacts:
            #     - Name:  !Join ['', [!Ref RepositoryName, 'Source']]
            #   Configuration:
            #     BranchName: 'master'
            #     RepositoryName: !GetAtt CodeCommitRepository.Name
            #   RunOrder: 1
            - InputArtifacts: []
              Name: Source-GH
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              OutputArtifacts:
                - Name:  !Join ['', [!Ref RepositoryName, 'Source-GH']]
              Configuration:
                Branch: 'master'
                Owner: MechanicalRock
                Repo: github-inception-pipeline
                OAuthToken: 'invalid'
                # OAuthToken: !GetAtt GithubOAuthToken.Value
              RunOrder: 1
        - Name: 'AdministerPipeline'
          Actions:
            - Name: 'AdministerPipeline'
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: REPLACE_ON_FAILURE 
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: !GetAtt [CloudFormationDeployActionRole, Arn]
                StackName: !Ref StageAdministerPipelineStackName
                TemplateConfiguration: !Join ['', [!Ref RepositoryName, 'Source-GH', '::aws_seed.json']]
                TemplatePath: !Join ['', [!Ref RepositoryName, 'Source-GH', '::aws_seed.yml']]
              InputArtifacts:
                - Name: !Join ['', [!Ref RepositoryName, 'Source-GH']]
              RunOrder: '1'
  GetSsmValueLambda:
    DependsOn:
    - LogGroupGetSsmValue
    Properties:
      Code:
        ZipFile:
          Fn::Join:
          - "\n"
          - - import cfnresponse, logging, traceback, boto3, datetime, json
            - from dateutil.tz import tzlocal
            - ''
            - ''
            - 'def parameter_exist(name):'
            - "    response = boto3.client('ssm').describe_parameters("
            - "        ParameterFilters=[{"
            - "            'Key': 'Name',"
            - "            'Values': ["
            - "                name"
            - "            ]"
            - "        }]"
            - "    )"
            - '    return len(response["Parameters"]) > 0'
            - ''
            - ''
            - 'def date_2_string(o):'
            - "    if isinstance(o, datetime.datetime):"
            - "        return o.__str__()"
            - ''
            - ''
            - 'def handler(event, context):'
            - '    logger = logging.getLogger("crypto_cfn")'
            - "    logger.setLevel(logging.DEBUG)"
            - "    ch = logging.StreamHandler()"
            - "    logger.addHandler(ch)"
            - '    name = event["ResourceProperties"]["Name"]'
            - "    try:"
            - ''
            - '        if event["RequestType"] in ["Create", "Update"]:'
            - "            if not parameter_exist(name):"
            - '                raise NameError("A Parameter named {} does not exists".format(name))'
            - ''
            - "            response = boto3.client('ssm').get_parameter_history("
            - "                Name=name,"
            - "                WithDecryption=True,"
            - "            )"
            - ''
            - "            ret_value = None"
            - '            if event["ResourceProperties"].get("Version") is not None:'
            - '                for param in response["Parameters"]:'
            - '                    if param["Version"] == int(event["ResourceProperties"].get("Version")):'
            - "                        ret_value = param"
            - "                        break"
            - "            else:"
            - '                ret_value = response["Parameters"][-1]'
            - ''
            - "            if ret_value is None:"
            - '                raise LookupError("Parameter not found")'
            - '            logger.info("Successfully retrieved parameter {}".format(name))'
            - ''
            - "            cfnresponse.send(event, context, cfnresponse.SUCCESS,"
            - "                             json.loads(json.dumps(ret_value, default=date_2_string)),"
            - '                             name + str(ret_value["Version"]))'
            - "        else:"
            - "            cfnresponse.send(event, context, cfnresponse.SUCCESS, None,
              name)"
            - ''
            - "    except Exception as ex:"
            - '        logger.error("Faild get parameter value: %s", name)'
            - '        logger.debug("Stack trace %s", traceback.format_exc())'
            - '        if event["RequestType"] in ["Create", "Update"]:'
            - '            cfnresponse.send(event, context, cfnresponse.FAILED, None,
              "0")'
            - "        else:"
            - '            cfnresponse.send(event, context, cfnresponse.SUCCESS, None,
              "0")'
      FunctionName:
        Fn::Join:
        - "-"
        - - Ref: AWS::StackName
          - get-ssm-value
      Handler: index.handler
      MemorySize: 1536
      Role:
        Fn::GetAtt:
        - GetSsmValueRole
        - Arn
      Runtime: python2.7
      Timeout: 300
    Type: AWS::Lambda::Function
  GetSsmValueRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: "/"
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - kms:Decrypt
            Effect: Allow
            Resource:
            - Ref: KmsKeyArn
          Version: '2012-10-17'
        PolicyName: decrypt
      - PolicyDocument:
          Statement:
          - Action:
            - ssm:GetParameterHistory
            Effect: Allow
            Resource:
            - Fn::Join:
              - ''
              - - 'arn:aws:ssm:'
                - Ref: AWS::Region
                - ":"
                - Ref: AWS::AccountId
                - ":parameter/*"
          - Action:
            - ssm:DescribeParameters
            Effect: Allow
            Resource:
            - "*"
          Version: '2012-10-17'
        PolicyName: ssm
    Type: AWS::IAM::Role
  LogGroupGetSsmValue:
    Properties:
      LogGroupName:
        Fn::Join:
        - ''
        - - "/aws/lambda/"
          - Fn::Join:
            - "-"
            - - Ref: AWS::StackName
              - get-ssm-value
      RetentionInDays: 14
    Type: AWS::Logs::LogGroup
  GithubOAuthToken:
    Properties:
      KeyId:
        !GetAtt CodepipelineKmsKey.Arn
      Name:
        Ref: SSMGithubOAuthTokenParameter
      ServiceToken:
        Fn::GetAtt:
        - GetSsmValueLambda
        - Arn
      Version:
        Ref: SSMGithubOAuthTokenParameterVersion
    Type: Custom::GetSsmValue
  CodepipelineKmsKey: Type: "AWS::KMS::Key"
    Properties: 
      Description: KMS Key for encrypting GitHub OAuth token
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy: 
        Version: 2012-10-17
        Statement:
          - Action:
              - kms:Decrypt
            Resource: '*'
            Effect: Allow
            Principal:
              AWS: 
                !GetAtt GetSsmValueLambda.Arn
Outputs:
  CodeCommitRepositoryArn:
    Description: CodeCommit Arn
    Export:
      Name: !Join ['', [!Ref 'AWS::StackName', 'CodeCommitRepositoryArn']]
    Value: !GetAtt CodeCommitRepository.Arn
  CodeCommitRepositoryCloneUrlHttp:
    Description: CodeCommit CloneUrlHttp
    Export:
      Name: !Join ['', [!Ref 'AWS::StackName', 'CodeCommitRepositoryCloneUrlHttp']]
    Value: !GetAtt CodeCommitRepository.CloneUrlHttp
  CodePipelineBucketArn:
    Description: CodePipeline S3 Bucket Arn
    Export:
      Name: !Join ['', [!Ref 'AWS::StackName', 'CodePipelineBucketArn']]
    Value: !GetAtt CodePipelineBucket.Arn
  CodePipelineBucketDomainName:
    Description: CodePipeline S3 Bucket DomainName
    Export:
      Name: !Join ['', [!Ref 'AWS::StackName', 'CodePipelineBucketDomainName']]
    Value: !GetAtt CodePipelineBucket.DomainName
  CodePipelineBucketWebsiteURL:
    Description: CodePipeline S3 Bucket WebsiteURL
    Export:
      Name: !Join ['', [!Ref 'AWS::StackName', 'CodePipelineBucketWebsiteURL']]
    Value: !GetAtt CodePipelineBucket.WebsiteURL
  CloudFormationDeployActionRoleArn:
    Description: CloudFormationDeployActionRole Arn
    Export:
      Name: !Join ['', [!Ref 'AWS::StackName', 'CloudFormationDeployActionRoleArn']]
    Value: !GetAtt CloudFormationDeployActionRole.Arn
  CodePipelineRoleArn:
    Description: CodePipelineRole Arn
    Export:
      Name: !Join ['', [!Ref 'AWS::StackName', 'CodePipelineRoleArn']]
    Value: !GetAtt CodePipelineRole.Arn
  CodePipelineName:
    Description: CodePipeline Name
    Export:
      Name: !Join ['', [!Ref 'AWS::StackName', 'CodePipelineName']]
    Value: !Ref CodePipeline
  CodePipelineKmsKeyArn:
    Description: KMS Key ARN to encrypt GitHub OAuth token
    Export:
      Name: !Join ['', [!Ref 'AWS::StackName', 'CodepipelineKmsKey']]
    Value: !Ref CodepipelineKmsKey